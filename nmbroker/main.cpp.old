#include <iostream>
#include "dmdatabase.h"

using namespace std;
using namespace DocketMinder;

#define debugger std::cout

std::vector<std::string> split(const std::string &s, char delimiter);

int main()
{
    cout << "Hello World!" << endl;

    DocketMinder::DMDatabase *dm = new DocketMinder::DMDatabase();
    // Map to store member function pointers

    delete dm;
    return 0;
}

static void TestScript(DocketMinder::DMDatabase &dm)
{
    bool result = false;

    ///////////////////////////////////////////////////////////////////////////////////////////
    /// Inserts
    Key insertedKey;
    insertedKey = dm.InsertPerson("Not a", "Person");
    debugger << "Inserted person and received key " << insertedKey;

    insertedKey =  dm.InsertParalegal("Not a","Paralegal");
    debugger << "Inserted paralegal and received key " << insertedKey;

    insertedKey = dm.InsertExaminer("Not an","Examiner");
    debugger << "Inserted examiner and received key " << insertedKey;

    insertedKey = dm.InsertInventor("Not an","Inventor");
    debugger << "Inserted inventor and received key " << insertedKey;

    insertedKey = dm.InsertPersonOldId("Not an","OldPerson",7);
    debugger << "Inserted older person and received key " << insertedKey;

    String firstMatter = "01234-5678";
    String secondMatter = "9876-5433";
    String thirdMatter = "2345-6789";
    String fourthMatter = "8765-4321";
    String fifthMatter = "3456-7890";
    String sixthMatter = "0987.6543";

    insertedKey = dm.InsertMatter(firstMatter);
    debugger << "Inserted matter and received key " << insertedKey;

    insertedKey = dm.InsertPatentMatter(firstMatter);
    debugger << "Inserted patent matter with existing matter and received key " << insertedKey;

    insertedKey = dm.InsertPatentMatter(secondMatter);
    debugger << "Inserted patent matter with new matter and received key " << insertedKey;

    Key InsertTrademarkMatter(String DocketNumber);
    Key InsertCopyrightMatter(String DocketNumber);
    Key InsertGeneralMatter(String DocketNumber);
    Key InsertLitigationMatter(String DocketNumber);

    Key InsertTask(Key matter, Key taskType);

    ///////////////////////////////////////////////////////////////////////////////////////////
    /// Update Handlers
    String table = "table";
    String field = "field";
    Key key = 1;
    String value = "value";
    Uint32 iValue = 3;
    Key kValue = 5;
    //Inserts
    dm.UpdateField(table, field, key, value);
    dm.UpdateUintField(table, field, key, iValue);
    dm.UpdateKeyField(table, field, key, kValue);

    ///////////////////////////////////////////////////////////////////////////////////////////
    /// Updates
    AppointmentData appDat = {.AppointmentId = 1,
                              .AppointmentTime = DateTimeFromString("2024-07-12T12:30:00")};
    result = dm.UpdateAppointment(appDat);
    std::cerr << "Result of dm.UpdateAppointmentData was: " << result;

    ClientData clientData = {.ClientId = 12,
                             .DocketPrefix = "12345"};
    result = dm.UpdateClient(clientData);
    debugger << "Result of dm.UpdateClient was: " << result;

    CopyrightMatterData cmDat = {.CopyrightMatterId = 12,
                                 .fkAuthor = 19,
                                 .Created = DateFromString("2024-07-12"),
                                 .Filed = DateFromString("2024-07-12"),
                                 .Registered = DateFromString("2024-12-31"),
                                 .SerialNumber = "123456789",
                                 .RegistrationNumber = "23456789",
                                 .fkDeposit = 20,
                                 .fkWorkType = 21};
    dm.UpdateCopyrightMatter(cmDat);
    debugger << "Result of dm.UpdateCopyrightMatter was: " << result;

    // bool UpdateCopyrightFiling(CopyrightFilingData dat);
    // bool UpdateDeadline(DeadlineData dat);
    // bool UpdateEnterprise(EnterpriseData dat);
    // bool UpdateFiling(FilingData dat);
    // bool UpdateGeneralCase(GeneralCaseData dat);
    // bool UpdateGeneralTask(GeneralTaskData dat);
    // bool UpdateJurisdiction(JurisdictionData dat);
    // bool UpdateMatter(MatterData dat);
    // bool UpdateNote(NoteData dat);
    // bool UpdateObject(ObjectData dat);
    // bool UpdatePatentMatter(PatentMatterData dat);
    // bool UpdatePatentResponse(PatentResponseData dat);
    // bool UpdatePerson(PersonData dat);
    // bool UpdatePortfolio(PortfolioData dat);
    // bool UpdateResponse(ResponseData dat);
    // bool UpdateRole(RoleData dat);
    // bool UpdateState(StateData dat);
    // bool UpdateTag(TagData dat);
    // bool UpdateTask(TaskData dat);
    // bool UpdateTrademarkFiling(TrademarkFilingData dat);
    // bool UpdateTrademarkMatter(TrademarkMatterData dat);
    // bool UpdateTrademarkResponse(TrademarkResponseData dat);
    // bool UpdateUser(UserData dat);


} //end TesttScript
